data_describe.privacy.detection
======================================

.. py:module:: data_describe.privacy.detection





.. autoapisummary::

   data_describe.privacy.detection.sensitive_data


.. function:: sensitive_data(df, mode: str = 'redact', detect_infotypes: bool = True, columns: Optional[list] = None, score_threshold: float = _DEFAULT_SCORE_THRESHOLD, sample_size: int = _SAMPLE_SIZE, engine_backend=engine, compute_backend: Optional[str] = None)

   Identifies, redacts, and encrypts PII data.

   Note: sensitive_data uses Microsoft's Presidio in the backend. Presidio can be help identify sensitive data.
   However, because Presidio uses trained ML models, there is no guarantee that Presidio will find all sensitive information.

   :param df: The dataframe
   :type df: DataFrame
   :param mode: Select 'redact' or 'encrypt'.
                redact: Redact the sensitive data
                encrypt: Anonymize the sensitive data
   :type mode: str
   :param detect_infotypes: If True, identifies infotypes for each column
   :type detect_infotypes: bool
   :param columns: Defaults to None
   :type columns: [str]
   :param score_threshold: Minimum confidence value for detected entities to be returned. Default is 0.2.
   :type score_threshold: float
   :param sample_size: Number of sampled rows used for identifying column infotypes. Default is 100.
   :type sample_size: int
   :param engine_backend: The backend analyzer engine. Default is presidio_analyzer.
   :param compute_backend: Select compute backend
   :type compute_backend: str

   :returns: SensitiveDataWidget


.. py:class:: SensitiveDataWidget(engine=None, redact=None, encrypt=None, infotypes=None, sample_size=None, **kwargs)

   Bases: :class:`data_describe._widget.BaseWidget`

   Interface for collecting additional information about the sensitive data widget.

   .. method:: show(self, **kwargs)


      Show the transformed data or infotypes.



