data_describe.backends.compute._pandas.time_series
=========================================================

.. py:module:: data_describe.backends.compute._pandas.time_series





.. autoapisummary::

   data_describe.backends.compute._pandas.time_series.compute_stationarity_test
   data_describe.backends.compute._pandas.time_series.adf_test
   data_describe.backends.compute._pandas.time_series.kpss_test
   data_describe.backends.compute._pandas.time_series.compute_decompose_timeseries
   data_describe.backends.compute._pandas.time_series.compute_autocorrelation


.. function:: compute_stationarity_test(timeseries, test: str = 'dickey-fuller', regression: str = 'c', **kwargs)

   Perform stationarity tests to see if mean and variance are changing over time.

   Backend uses statsmodel's  statsmodels.tsa.stattools.adfuller or statsmodels.tsa.stattools.kpss

   :param timeseries: Series containing a datetime index
   :param test: Choice of stationarity test. "kpss" or "dickey-fuller". Defaults to "dickey-fuller".
   :param regression: Constant and trend order to include in regression. Choose between 'c','ct','ctt', and 'nc'
   :param \*\*kwargs: Keyword arguments for adf and kpss

   :returns: Pandas dataframe containing the statistics
   :rtype: st


.. function:: adf_test(timeseries, autolag: str = 'AIC', regression: str = 'c', **kwargs)

   Compute the Augmented Dickey-Fuller (ADF) test for stationarity.

   Backend uses statsmodels.tsa.stattools.adfuller

   :param timeseries: The timeseries
   :param autolag: Method to use when determining the number of lags. Defaults to 'AIC'. Choose between 'AIC', 'BIC', 't-stat', and None
   :param regression: Constant and trend order to include in regression. Choose between 'c','ct','ctt', and 'nc'
   :param \*\*kwargs: Keyword arguments for adfuller

   :returns: Pandas dataframe containing the statistics


.. function:: kpss_test(timeseries, regression: str = 'c', nlags: Optional[int] = None, **kwargs)

   Compute the Kwiatkowski–Phillips–Schmidt–Shin (KPSS) test for stationarity.

   Backend uses statsmodels.tsa.stattools.kpss

   :param timeseries: The timeseries
   :param regression: The null hypothesis for the KPSS test.
                      'c' : The data is stationary around a constant (default).
                      'ct' : The data is stationary around a trend.
   :param nlags: Indicates the number of lags to be used. Defaults to None.
   :param \*\*kwargs: Keyword arguments for kpss

   :returns: Pandas dataframe containing the statistics


.. function:: compute_decompose_timeseries(df, col, model: str = 'additive', **kwargs)

   Seasonal decomposition using moving averages.

   NOTE: decomposition object in modin does not preserve datetime index.

   :param df: The dataframe
   :param col: The col of interest. Must be numeric datatype
   :param model: Type of seasonal component. Defaults to "additive".
   :param \*\*kwargs: Keyword arguments

   :returns: statsmodels.tsa.seasonal.DecomposeResult object
   :rtype: result


.. function:: compute_autocorrelation(timeseries, n_lags: Optional[int] = 40, plot_type: str = 'acf', fft: bool = False, **kwargs)

   Correlation estimate using partial autocorrelation or autocorrelation.

   :param timeseries: Series object containing datetime index
   :param n_lags: Number of lags to return autocorrelation for. Defaults to 40.
   :param plot_type: Choose between 'acf' or 'pacf. Defaults to "acf".
   :param fft: If True, computes ACF via fourier fast transform (FFT). Defaults to False.
   :param \*\*kwargs: Keyword arguments

   :returns: numpy.ndarray containing the correlations
   :rtype: data


