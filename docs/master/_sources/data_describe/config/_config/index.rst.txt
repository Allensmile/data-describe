:orphan:

data_describe.config._config
===================================

.. py:module:: data_describe.config._config





.. autoapisummary::

   data_describe.config._config.get_root
   data_describe.config._config.get_option
   data_describe.config._config.set_option
   data_describe.config._config.get_config
   data_describe.config._config.set_config
   data_describe.config._config.flatten_config
   data_describe.config._config.update_context


.. function:: get_root(path: str) -> Any

   Get the parent dict (node) of a given path from the global config nested dict.

   :param path: The "dot-style" path to the configuration item, e.g. 'backends.viz'

   :returns: The parent dict, to be used to access the configuration item or section


.. function:: get_option(path: str) -> Any

   Get the current value of the option.

   :param path: The "dot-style" path to the configuration item, e.g. 'backends.viz'

   :returns: The current value of the option


.. function:: set_option(path: str, value: Any) -> None

   Set the current value of the option.

   :param path: The "dot-style" path to the configuration item, e.g. 'backends.viz'
   :param value: The value to update


.. function:: get_config() -> Dict

   Get a deep copy of the current configuration.

   :returns: The current configuration dictionary


.. function:: set_config(config: Dict) -> None

   Updates the current configuration dictionary.

   :param config: A flattened configuration dictionary specifying values to update


.. function:: flatten_config(config: Dict) -> Dict

   Flattens the nested configuration dictionary into "dot-style" paths for each item.

   :param config: A flattened configuration dictionary

   :returns: A flattened dictionary

             For example:

             {"backends": {"viz": "seaborn"}}
             becomes:
             {"backends.viz": "seaborn"}


.. py:class:: Options(config: dict, path: str = '')

   Provides module-style access to configuration items.


.. data:: options
   

   

.. function:: update_context(*args)

   data-describe configuration context.

   This can be used to use certain configuration values for a limited block of code,
   without needing to explicitly change these values to what they were previously.

   For example, if the current figure size is (10, 10), the following can be used to
   make one plot with a different figure size:
   ```
   with dd.config.update_context("display.fig_height", 20):
       dd.plot(df) # fig_height = 20 # noqa:RST301
   ```

   :param \*args: May be one of two formats:
                  1. A single dictionary, either nested or using the configuration "path"s for keys
                  2. Pairs of arguments, where the first argument is the configuration "path" and the
                      second is the value


