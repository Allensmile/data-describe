:orphan:

data_describe.compat._dependency
=======================================

.. py:module:: data_describe.compat._dependency





.. autoapisummary::

   data_describe.compat._dependency.nltk_download
   data_describe.compat._dependency.spacy_download
   data_describe.compat._dependency.no_side_import
   data_describe.compat._dependency.requires


.. py:class:: DependencyManager(imports: Dict[str, Callable])

   Manage optional dependencies for data-describe.

   .. rubric:: Examples

   Optional modules can be accessed as an attribute::

       _compat = DependencyManager({"presidio": None})
       engine = _compat["presidio_analyzer"].AnalyzerEngine()

   .. method:: search_install(self, modules: List[str])


      Searches for installed modules and determines if they exist.

      The attribute `installed_modules` maps module names to booleans
      for modules which are found.

      :param modules: List of module names
      :type modules: List[str]


   .. method:: check_install(self, module: str)


      Checks to see if a module is installed.



.. function:: nltk_download(module)

   Downloads NLTK corpora.


.. function:: spacy_download(module)

   Downloads SpaCy language model.


.. function:: no_side_import(module)

   Placeholder for imports that should not do anything additional on import.


.. function:: requires(package_name)

   Marks a method or class that requires an optional dependency.


